#!/usr/bin/env python3
"""
WordPress Publisher for YTLite
Publishes project content to a WordPress site using the REST API.

Requires per-project .env (recommended) or root .env with variables:
- WORDPRESS_URL (e.g., https://example.com)
- WORDPRESS_USERNAME
- WORDPRESS_APP_PASSWORD (Application Password)

This publisher uploads the thumbnail to the Media Library and creates a post
with the description content and links to the generated video/audio.
"""
from __future__ import annotations

import base64
import json
import os
from pathlib import Path
from typing import Optional

import requests
from markdown import markdown as md_to_html
from rich.console import Console

console = Console()

class WordPressPublisher:
    def __init__(self, base_url: Optional[str] = None, username: Optional[str] = None, app_password: Optional[str] = None):
        self.base_url = base_url or os.getenv("WORDPRESS_URL", "").rstrip("/")
        self.username = username or os.getenv("WORDPRESS_USERNAME", "")
        self.app_password = app_password or os.getenv("WORDPRESS_APP_PASSWORD", "")
        if not (self.base_url and self.username and self.app_password):
            console.print("[yellow]WordPress credentials not fully configured. Publishing may fail.[/]")

    def _auth(self):
        token = f"{self.username}:{self.app_password}".encode("utf-8")
        return {
            "Authorization": "Basic " + base64.b64encode(token).decode("utf-8")
        }

    def _api(self, path: str) -> str:
        return f"{self.base_url}/wp-json/wp/v2{path}"

    def upload_media(self, file_path: str) -> Optional[dict]:
        try:
            fn = Path(file_path).name
            headers = {
                **self._auth(),
                "Content-Disposition": f"attachment; filename={fn}",
            }
            # Guess content-type roughly
            ct = "image/jpeg" if fn.lower().endswith((".jpg", ".jpeg")) else "application/octet-stream"
            files = {"file": (fn, open(file_path, "rb"), ct)}
            r = requests.post(self._api("/media"), headers=headers, files=files, timeout=60)
            if r.status_code not in (200, 201):
                console.print(f"[yellow]Media upload failed: {r.status_code} {r.text}[/]")
                return None
            return r.json()
        except Exception as e:
            console.print(f"[yellow]Media upload error: {e}[/]")
            return None

    def create_post(self, title: str, html_content: str, featured_media_id: Optional[int] = None, status: str = "draft") -> Optional[dict]:
        try:
            headers = {
                **self._auth(),
                "Content-Type": "application/json",
            }
            payload = {
                "title": title,
                "content": html_content,
                "status": status,
            }
            if featured_media_id:
                payload["featured_media"] = featured_media_id
            r = requests.post(self._api("/posts"), headers=headers, data=json.dumps(payload), timeout=60)
            if r.status_code not in (200, 201):
                console.print(f"[yellow]Create post failed: {r.status_code} {r.text}[/]")
                return None
            return r.json()
        except Exception as e:
            console.print(f"[yellow]Create post error: {e}[/]")
            return None

    def publish_project(self, project_dir: str, publish_status: str = "draft") -> Optional[dict]:
        """
        Publish a project directory generated by YTLite to WordPress.
        Expects at minimum: description.md, thumbnail.jpg.
        Links to video/audio files served by your preview server.
        """
        p = Path(project_dir)
        desc_md = p / "description.md"
        thumb = p / "thumbnail.jpg"
        video = p / "video.mp4"
        audio = p / "audio.mp3"
        title = p.name
        if desc_md.exists():
            try:
                import frontmatter
                post = frontmatter.load(desc_md)
                title = post.metadata.get("title", title)
                body_md = post.content
            except Exception:
                body_md = desc_md.read_text(encoding="utf-8")
        else:
            body_md = title

        # Build HTML content - allow absolute links via PUBLIC_BASE_URL
        public_base = os.getenv("PUBLIC_BASE_URL", "").rstrip("/")
        rel_video = f"/output/projects/{p.name}/video.mp4"
        rel_audio = f"/output/projects/{p.name}/audio.mp3"
        video_url = f"{public_base}{rel_video}" if public_base else rel_video
        audio_url = f"{public_base}{rel_audio}" if public_base else rel_audio
        content_md = body_md + "\n\n" + f"[Pobierz audio]({audio_url})"
        content_html = md_to_html(content_md)
        # Embed video via HTML tag
        content_html += f"\n\n<video controls width='720' src='{video_url}'></video>\n"

        featured_id = None
        if thumb.exists():
            media = self.upload_media(str(thumb))
            if media and isinstance(media, dict):
                featured_id = media.get("id")

        result = self.create_post(title=title, html_content=content_html, featured_media_id=featured_id, status=publish_status)
        return result
